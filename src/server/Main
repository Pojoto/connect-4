
local play_human_remote = game:GetService("ReplicatedStorage").PlayHuman
local play_self_remote = game:GetService("ReplicatedStorage").PlaySelf
local turn_remote = game:GetService("ReplicatedStorage").Turn
local camera_remote = game:GetService("ReplicatedStorage").Camera
local game_over_remote = game:GetService("ReplicatedStorage").GameOver
local player_state_remote = game:GetService("ReplicatedStorage").PlayerState

local GameObject = require(game:GetService("ServerScriptService").GameObject)
local unit = game:GetService("ServerStorage").Unit
local token = game:GetService("ReplicatedStorage").Token

local SPACING = 8
local HEIGHT = 25

local columns_x = {

	-3 * SPACING,
	-2 * SPACING,
	-SPACING,
	0,
	SPACING,
	2 * SPACING,
	3 * SPACING

}

local iteration = 0
local board_dict = {}

--contians the player of the next person to be paired to a game
local queue = nil


local function drop_token(drop_column, game_object)
	local center = game_object.Unit.Board.Center
	local clone = token:Clone()
	clone.Position = Vector3.new(center.Position.X -  columns_x[drop_column], center.Position.Y + HEIGHT, center.Position.Z) 
	clone.Color = game_object.Players[game_object.CurrentTurn][2]
	clone.Anchored = false
	clone.Parent = game_object.Unit.Tokens
end

play_human_remote.OnServerEvent:Connect(function(player)
	
	if queue then --check if queue is empty
		
		--check for same player entering queue
		if queue ~= player then
	
			local new_unit = unit:Clone()
			
			new_unit.Parent = game.Workspace
			new_unit:PivotTo(CFrame.new(new_unit.PrimaryPart.Position + Vector3.new(0, 0, 200 * iteration)))
			
			local center = new_unit.Board.Center
			
			--change players states to game state - updates ui and camera
			player_state_remote:FireClient(queue, "game", center, player)
			player_state_remote:FireClient(player, "game", center, queue)
		
			local new_game = GameObject.new(queue, player, new_unit)
			queue = nil

			--make a new id (simple linearish function helps provide some concealment so exploiters can't send random ids of other games)
			local new_id = 2 * iteration + (iteration % 4 + 92)

			iteration += 1
			
			--add the game object and its id to the database
			board_dict[new_id] = new_game

			new_game:NextTurn(new_id)
		end
		
	else --if queue is empty
		queue = player
		player_state_remote:FireClient(player, "in queue", true)
	end
end)

play_self_remote.OnServerEvent:Connect(function(player)
	local new_unit = unit:Clone()
	new_unit.Parent = game.Workspace
	new_unit:PivotTo(CFrame.new(new_unit.PrimaryPart.Position + Vector3.new(0, 0, 200 * iteration)))

	local center = new_unit.Board.Center
	
	--check if the player is in the queue. if they are then remove them from queue
	if queue == player then
		queue = nil
	end

	--fire clients to hide intro frame and to move camera into unit
	player_state_remote:FireClient(player, "game", center, player)

	local new_game = GameObject.new(player, player, new_unit)
	
	local new_id = 2 * iteration + (iteration % 4 + 92)
	iteration += 1
	board_dict[new_id] = new_game
	
	new_game:NextTurn(new_id, center, new_game.BoardMatrix)
end)

turn_remote.OnServerEvent:Connect(function(player, id, drop_column)
	
	--find the players associated game object through its given id
	local game_object = board_dict[id]
	
	--find the center associated with the unit of the game object
	local center = game_object.Unit.PrimaryPart
	
	--execute the turn in the board matrix and physically(server side)
	table.insert(game_object.BoardMatrix[drop_column], game_object.CurrentTurn)
	drop_token(drop_column, game_object)
	
	local finished, winner, loser = game_object:IsGameOver(drop_column)
		
	if finished then
		--the game is over (connect 4 found)
		wait(1)
		--check if game was tie (if turn was returned nil)
		if winner and loser then
			--fire client to winner that he won, fire client to loser that he lost (current turn is winner turn)
			player_state_remote:FireClient(loser, "game over", false)
			player_state_remote:FireClient(winner, "game over", true)
		else
			--game was a tie
			player_state_remote:FireClient(loser, "game over", nil)
			player_state_remote:FireClient(winner, "game over", nil)
		end
		wait(2)
		game_object:Destroy()
		
	else
		--check if someone won, if they didnt then call next turn
		game_object.CurrentTurn = (game_object.CurrentTurn % 2) + 1

		--call the next player's turn
		game_object:NextTurn(id)
	end
	


end)

